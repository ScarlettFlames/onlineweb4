name: Lint and test

on:
  push:
    branches:
      - main
  pull_request:

env:
  POETRY_VERSION: "1.1.13"
  NODE_VERSION: "16"
  PYTHON_VERSION: "3.9"

jobs:
  test-python:
    runs-on: ubuntu-latest
    # TODO: fix postgresql tests, oidc_provider fails
    # services:
    #  db:
    #    image: postgres:latest
    #    environment:
    #      POSTGRES_USER: postgres
    #      POSTGRES_DB: onlineweb4
    #      POSTGRES_PASSWORD: postgres

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install python dependencies
        run: |
          poetry env use 3.9
          poetry install

      - name: Install node dependencies
        run: yarn install --pure-lockfile

      - name: npm build
        run: npm run build:prod

      - name: Python tests
        env:
          OW4_DJANGO_STRIPE_PUBLIC_KEY_ARRKOM: ${{ secrets.STRIPE_PUBLIC_KEY_ARRKOM }}
          OW4_DJANGO_STRIPE_PUBLIC_KEY_PROKOM: ${{ secrets.STRIPE_PUBLIC_KEY_PROKOM }}
          OW4_DJANGO_STRIPE_PUBLIC_KEY_TRIKOM: ${{ secrets.STRIPE_PUBLIC_KEY_TRIKOM }}
          OW4_DJANGO_STRIPE_PRIVATE_KEY_ARRKOM: ${{ secrets.STRIPE_PRIVATE_KEY_ARRKOM }}
          OW4_DJANGO_STRIPE_PRIVATE_KEY_PROKOM: ${{ secrets.STRIPE_PRIVATE_KEY_PROKOM }}
          OW4_DJANGO_STRIPE_PRIVATE_KEY_TRIKOM: ${{ secrets.STRIPE_PRIVATE_KEY_TRIKOM }}
          # TODO: see service todo
          # DATABASE_URL: postgres://postgres:postgres@db:5432/onlineweb4
        run: |
          poetry env use 3.9
          poetry run tox -e tests

      - uses: codecov/codecov-action@v2

  lint-python:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'

      - name: Install python dependencies
        run: |
          poetry env use 3.9
          poetry install

      - name: Python linting
        run: |
          poetry env use 3.9
          poetry run tox -e flake8 -e isort -e black

  django-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Poetry
        run: pipx install poetry==${{ env.POETRY_VERSION }}

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          # cache: 'poetry'

      - name: Install python dependencies
        run: |
          poetry run python -V
          poetry env use 3.9
          poetry install
          poetry run python -V

      - name: Check migrations
        run: |
          poetry run python -V
          poetry env use 3.9
          poetry run python -V
          poetry run python manage.py makemigrations --check

      - name: Django check
        run: |
          poetry env use 3.9
          poetry run python manage.py check

  lint-js:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install node dependencies
        run: yarn install --pure-lockfile

      - name: JS linting
        run: npm run lint-js

      - name: less linting
        run: npm run lint-less
